/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frontend.Building.Inventary.Transfer;

import javax.swing.event.TableModelEvent;
import javax.swing.table.TableModel;

/**
 *
 * @author phily
 */
public class Movement extends javax.swing.JFrame {

    /**
     * Creates new form Transfer
     */
    public Movement() {
        initComponents();
        
        setLastColumnListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_hearder = new javax.swing.JPanel();
        lbl_state = new javax.swing.JLabel();
        txt_Code = new javax.swing.JTextField();
        lbl_name = new javax.swing.JLabel();
        lbl_brand = new javax.swing.JLabel();
        txtF_State = new javax.swing.JTextField();
        lbl_code = new javax.swing.JLabel();
        txtF_To1 = new javax.swing.JTextField();
        txtF_since = new javax.swing.JTextField();
        lbl_recipient_from = new javax.swing.JLabel();
        txtF_until = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_transfer = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btn_transfer = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        scrollPanel_txtA = new javax.swing.JScrollPane();
        txtA_reason = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        panel_hearder.setBorder(javax.swing.BorderFactory.createTitledBorder("Header"));

        lbl_state.setFont(new java.awt.Font("Inter", 1, 13)); // NOI18N
        lbl_state.setText("State");

        txt_Code.setEditable(false);

        lbl_name.setFont(new java.awt.Font("Inter", 1, 13)); // NOI18N
        lbl_name.setText("Since:");

        lbl_brand.setFont(new java.awt.Font("Inter", 1, 13)); // NOI18N
        lbl_brand.setText("Prefereable to send:");

        txtF_State.setEditable(false);

        lbl_code.setFont(new java.awt.Font("Inter", 1, 13)); // NOI18N
        lbl_code.setText("ID:");

        txtF_To1.setEditable(false);
        txtF_To1.setText("A QUIEN sele harÃ¡ la transfer");
        txtF_To1.setToolTipText("");

        txtF_since.setEditable(false);

        lbl_recipient_from.setFont(new java.awt.Font("Inter", 1, 13)); // NOI18N
        lbl_recipient_from.setText("Recipient:");

        txtF_until.setEditable(false);

        javax.swing.GroupLayout panel_hearderLayout = new javax.swing.GroupLayout(panel_hearder);
        panel_hearder.setLayout(panel_hearderLayout);
        panel_hearderLayout.setHorizontalGroup(
            panel_hearderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_hearderLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(panel_hearderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel_hearderLayout.createSequentialGroup()
                        .addComponent(lbl_state, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtF_State, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_hearderLayout.createSequentialGroup()
                        .addGroup(panel_hearderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel_hearderLayout.createSequentialGroup()
                                .addComponent(lbl_code, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_Code, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel_hearderLayout.createSequentialGroup()
                                .addComponent(lbl_recipient_from, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtF_To1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 1, Short.MAX_VALUE)))
                .addGap(160, 160, 160)
                .addGroup(panel_hearderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panel_hearderLayout.createSequentialGroup()
                        .addComponent(lbl_name, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtF_since))
                    .addGroup(panel_hearderLayout.createSequentialGroup()
                        .addComponent(lbl_brand, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtF_until, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        panel_hearderLayout.setVerticalGroup(
            panel_hearderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_hearderLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(panel_hearderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_Code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_code))
                .addGap(40, 40, 40)
                .addGroup(panel_hearderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_recipient_from)
                    .addComponent(txtF_To1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_name)
                    .addComponent(txtF_since, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_hearderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtF_State, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_state)
                    .addComponent(lbl_brand)
                    .addComponent(txtF_until, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        table_transfer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Code", "Name", "Brand", "StockID", "Price", "Available", "Requested", "", "To send"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table_transfer);
        if (table_transfer.getColumnModel().getColumnCount() > 0) {
            table_transfer.getColumnModel().getColumn(0).setResizable(false);
            table_transfer.getColumnModel().getColumn(0).setPreferredWidth(90);
            table_transfer.getColumnModel().getColumn(1).setPreferredWidth(190);
            table_transfer.getColumnModel().getColumn(2).setResizable(false);
            table_transfer.getColumnModel().getColumn(2).setPreferredWidth(150);
            table_transfer.getColumnModel().getColumn(3).setResizable(false);
            table_transfer.getColumnModel().getColumn(3).setPreferredWidth(100);
            table_transfer.getColumnModel().getColumn(4).setResizable(false);
            table_transfer.getColumnModel().getColumn(4).setPreferredWidth(90);
            table_transfer.getColumnModel().getColumn(5).setResizable(false);
            table_transfer.getColumnModel().getColumn(5).setPreferredWidth(80);
            table_transfer.getColumnModel().getColumn(6).setResizable(false);
            table_transfer.getColumnModel().getColumn(6).setPreferredWidth(80);
            table_transfer.getColumnModel().getColumn(7).setResizable(false);
            table_transfer.getColumnModel().getColumn(7).setPreferredWidth(10);
            table_transfer.getColumnModel().getColumn(8).setResizable(false);
            table_transfer.getColumnModel().getColumn(8).setPreferredWidth(70);
        }

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "From", "Since", "Until"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(40);
        }

        btn_transfer.setText("TRANSFER");
        btn_transfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_transferActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Inter", 1, 13)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Pending");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        txtA_reason.setEditable(false);
        txtA_reason.setColumns(20);
        txtA_reason.setRows(3);
        txtA_reason.setTabSize(5);
        scrollPanel_txtA.setViewportView(txtA_reason);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(panel_hearder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_transfer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollPanel_txtA, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panel_hearder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(7, 7, 7)
                        .addComponent(scrollPanel_txtA, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_transfer, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_transferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_transferActionPerformed
        //luego de presionarlo, si es que hay un #>0, se dees-enabled las
        //Casillas corresp a TO SEND
    }//GEN-LAST:event_btn_transferActionPerformed

//SOLO PODRÃ EDITAR si el TO es igual al nombre de la tienda en la que trabaja el respectivo encargado de inventario
    
    private void setLastColumnListener(){
        TableModel modelo = table_transfer.getModel();//no es nec el DefaultTableModel...

        modelo.addTableModelListener((TableModelEvent e) -> {
            setMaximunTransferable();
        });
                
    }//solo porque creo que en java no se puede pasar una funciÃ³n como argumento asÃ­ como en react, para incocarla en lugar de obtner el valor, entonces se quedarÃ¡ aquÃ­ la funciÃ³n...
    
    private void setMaximunTransferable(){
        int value = (Integer) table_transfer.getModel()
                    .getValueAt(table_transfer.getSelectedRow(),
                                table_transfer.getSelectedColumn());
        int limit = (Integer) table_transfer.getModel()
                    .getValueAt(table_transfer.getSelectedRow(),
                                (table_transfer.getSelectedColumn())-1);//aunque lo ideal serÃ­a. Exe una query...
    
        if(value > limit){
            table_transfer.getModel()
                    .setValueAt(limit,
                                table_transfer.getSelectedRow(),
                                table_transfer.getSelectedColumn());
    }//no hay que poner IF aquÃ­ porque, si se exe el evt queire decir que hay filas y si hay filas YA hay datos...    
}
    
//Lo usarÃ¡ tanto el de INVENTARY como el de STOWAGE
    //pero el de stowage solo tendrÃ¡ la oportunidad de ver el botÃ³n
        //transfer
    
//Al seleccionar FROM de la tabla de request, si el dato es igual a la office en la que estÃ¡
    //el de inventario actualmente, entonces 
        //recipient dirÃ¡ FROM (en este caso bodega) y
        //el botÃ³n dirÃ¡ RECEIVED, y al igual que cuando se presione, cuando diga TRANSFER
                //se bloquerÃ¡ para no permitir que sea presionado de nuevo
                //es decir cuando RECEIVED sea el estado
    
//El listado mostrarÃ¡ todo lo que tenga como TO: Current
        //porque eso correpsonde al listado de request que puede y deberÃ­a
        //procesar la tienda en cuestiÃ³n
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_transfer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbl_brand;
    private javax.swing.JLabel lbl_code;
    private javax.swing.JLabel lbl_name;
    private javax.swing.JLabel lbl_recipient_from;
    private javax.swing.JLabel lbl_state;
    private javax.swing.JPanel panel_hearder;
    private javax.swing.JScrollPane scrollPanel_txtA;
    private javax.swing.JTable table_transfer;
    private javax.swing.JTextArea txtA_reason;
    private javax.swing.JTextField txtF_State;
    private javax.swing.JTextField txtF_To1;
    private javax.swing.JTextField txtF_since;
    private javax.swing.JTextField txtF_until;
    private javax.swing.JTextField txt_Code;
    // End of variables declaration//GEN-END:variables
}
