/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frontend.Building.Product;

import Backend.DB.DAO.Inventary_DAO;
import Backend.DB.DAO.Stowage_DAO;
import Backend.DB.DTO.Product_DTO;
import Backend.DB.DTO.Stock_DTO;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;

/**
 *
 * @author phily
 */
public class Product extends javax.swing.JFrame {   
    private Inventary_DAO inventary_DAO;
    private Stowage_DAO stowage_DAO;
    private boolean isInventary;
    
    private int situacion;
    private long code;
    private String office;
    private boolean[] results = {false, false, false};
    private Stock_DTO stock = null;

    /**
     * This one is for VIEWS     
     */
    public Product(long code, String office,int situacion, boolean isInventary,
            Inventary_DAO inventaryDAO, Stowage_DAO stowageDAO){        
        this(office, situacion, isInventary, inventaryDAO, stowageDAO);
        this.code = code;//este va a ser seteado cuando cuando sea un VIEW      
        
        this.setUpViews();
    }
    
    /**
     * And this one for UPDATES or
     * INSERTIONS
     */
    public Product(String office, int situacion, boolean isInventary,
            Inventary_DAO inventaryDAO, Stowage_DAO stowageDAO) {//1. INSERT, 2. UPDATE, 3. Just see
        initComponents();
        
        this.office = office;
        this.inventary_DAO = inventaryDAO;
        this.stowage_DAO = stowageDAO;
        this.situacion = situacion;
        this.isInventary = isInventary;
        
        if(this.situacion == 1){//INSERT
            if(!this.isInventary){
               this.setEditableFields(false, true, true, true, true, true, true, true);
            }else{
                this.setEditableFields(false, true, false, false, false, false, true, false);
            }//tampoco tiene sentido que add de esta manera, porque se supone que por transferencias debería recibir los prod y así solo aprobar... pero así como había dicho hacer tiempo, como para hacer un medio "acuerdo" digamos que los producots llegaron a la tienda sin aviso, porque a los de bodega no les tocaba o era demasiado. LO cual no tendría por qué suceder pero xD               
        }else if(this.situacion == 2){//UPDATE
            if(!this.isInventary){
                this.setEditableFields(true, false, false, false, false, true, true, true);
            }else{
                this.setEditableFields(true, false, false, false, false, false, true, false);
            }// this.setEditableFields(true, false, false, false, false, false, true, false);//ni aun la cdad modificaría, porque no puede no eli no add directamente, ya que lo hace con las trasnferencias...                         
            
            //Cabe resaltar que el código aunque esté habilitado, es para guardar no ser cambiado...
        }else{
            this.setEditableFields(false, false, false, false, false, false, false, false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_product_container = new javax.swing.JPanel();
        panel_product_picture = new javax.swing.JPanel();
        lbl_product_code = new javax.swing.JLabel();
        txtF_product_stockID = new javax.swing.JTextField();
        txtF_product_code = new javax.swing.JTextField();
        lbl_product_stockID = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        lbl_product_photo = new javax.swing.JLabel();
        lbl_change_photo = new javax.swing.JLabel();
        panel_product_generalDesc = new javax.swing.JPanel();
        txtF_product_name = new javax.swing.JTextField();
        lbl_product_name = new javax.swing.JLabel();
        cbBox_product_brand = new javax.swing.JComboBox<>();
        lbl_product_brand = new javax.swing.JLabel();
        panel_product_category = new javax.swing.JPanel();
        lbl_product_type = new javax.swing.JLabel();
        cbBox_product_type = new javax.swing.JComboBox<>();
        lbl_product_line = new javax.swing.JLabel();
        cbBox_product_line = new javax.swing.JComboBox<>();
        panel_product_description = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtA_product_description = new javax.swing.JTextArea();
        spinner_product_quantity = new javax.swing.JSpinner();
        lbl_product_price = new javax.swing.JLabel();
        lbl_product_quantity = new javax.swing.JLabel();
        spinner_product_price = new javax.swing.JSpinner();
        btn_ejecutar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel_product_picture.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lbl_product_code.setText("Code:");

        txtF_product_stockID.setEditable(false);

        txtF_product_code.setEditable(false);
        txtF_product_code.setText("------");

        lbl_product_stockID.setText("Stock ID:");

        lbl_change_photo.setFont(new java.awt.Font("Inter", 2, 13)); // NOI18N
        lbl_change_photo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_change_photo.setText("- Change picture -");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbl_product_photo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lbl_change_photo, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(lbl_product_photo, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_change_photo)
                .addContainerGap())
        );

        javax.swing.GroupLayout panel_product_pictureLayout = new javax.swing.GroupLayout(panel_product_picture);
        panel_product_picture.setLayout(panel_product_pictureLayout);
        panel_product_pictureLayout.setHorizontalGroup(
            panel_product_pictureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_product_pictureLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(panel_product_pictureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_product_pictureLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lbl_product_code)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtF_product_code))
                    .addGroup(panel_product_pictureLayout.createSequentialGroup()
                        .addComponent(lbl_product_stockID)
                        .addGap(18, 18, 18)
                        .addComponent(txtF_product_stockID)))
                .addGap(14, 14, 14))
        );
        panel_product_pictureLayout.setVerticalGroup(
            panel_product_pictureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_product_pictureLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(panel_product_pictureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_product_code, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtF_product_code, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_product_pictureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbl_product_stockID)
                    .addComponent(txtF_product_stockID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        panel_product_generalDesc.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("General Desc.")));

        txtF_product_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtF_product_nameKeyPressed(evt);
            }
        });

        lbl_product_name.setText("Name:");

        cbBox_product_brand.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lbl_product_brand.setText("Brand:");

        javax.swing.GroupLayout panel_product_generalDescLayout = new javax.swing.GroupLayout(panel_product_generalDesc);
        panel_product_generalDesc.setLayout(panel_product_generalDescLayout);
        panel_product_generalDescLayout.setHorizontalGroup(
            panel_product_generalDescLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_product_generalDescLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(panel_product_generalDescLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_product_generalDescLayout.createSequentialGroup()
                        .addComponent(lbl_product_name)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtF_product_name)
                        .addGap(21, 21, 21))
                    .addGroup(panel_product_generalDescLayout.createSequentialGroup()
                        .addComponent(lbl_product_brand)
                        .addGap(24, 24, 24)
                        .addComponent(cbBox_product_brand, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panel_product_generalDescLayout.setVerticalGroup(
            panel_product_generalDescLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_product_generalDescLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(panel_product_generalDescLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtF_product_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_product_name))
                .addGap(18, 18, 18)
                .addGroup(panel_product_generalDescLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cbBox_product_brand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_product_brand))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        panel_product_category.setBorder(javax.swing.BorderFactory.createTitledBorder("Category"));

        lbl_product_type.setText("Type:");

        cbBox_product_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lbl_product_line.setText("Line:");

        cbBox_product_line.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbBox_product_line.setEnabled(false);

        javax.swing.GroupLayout panel_product_categoryLayout = new javax.swing.GroupLayout(panel_product_category);
        panel_product_category.setLayout(panel_product_categoryLayout);
        panel_product_categoryLayout.setHorizontalGroup(
            panel_product_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_product_categoryLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(panel_product_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_product_categoryLayout.createSequentialGroup()
                        .addComponent(lbl_product_line)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbBox_product_line, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_product_categoryLayout.createSequentialGroup()
                        .addComponent(lbl_product_type)
                        .addGap(18, 18, 18)
                        .addComponent(cbBox_product_type, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_product_categoryLayout.setVerticalGroup(
            panel_product_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_product_categoryLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(panel_product_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbBox_product_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_product_type))
                .addGap(18, 18, 18)
                .addGroup(panel_product_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbBox_product_line, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_product_line))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        panel_product_description.setBorder(javax.swing.BorderFactory.createTitledBorder("Description"));

        txtA_product_description.setColumns(20);
        txtA_product_description.setRows(4);
        jScrollPane1.setViewportView(txtA_product_description);

        spinner_product_quantity.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        lbl_product_price.setText("Price:");

        lbl_product_quantity.setText("Quantity:");

        javax.swing.GroupLayout panel_product_descriptionLayout = new javax.swing.GroupLayout(panel_product_description);
        panel_product_description.setLayout(panel_product_descriptionLayout);
        panel_product_descriptionLayout.setHorizontalGroup(
            panel_product_descriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_product_descriptionLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(panel_product_descriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_product_descriptionLayout.createSequentialGroup()
                        .addComponent(lbl_product_price)
                        .addGap(18, 18, 18)
                        .addComponent(spinner_product_price, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                        .addGap(36, 36, 36)
                        .addComponent(lbl_product_quantity)
                        .addGap(18, 18, 18)
                        .addComponent(spinner_product_quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_product_descriptionLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))))
        );
        panel_product_descriptionLayout.setVerticalGroup(
            panel_product_descriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_product_descriptionLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(panel_product_descriptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_product_price)
                    .addComponent(spinner_product_price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_product_quantity)
                    .addComponent(spinner_product_quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        btn_ejecutar.setText("EJECUTAR");
        btn_ejecutar.setEnabled(false);
        btn_ejecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ejecutarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_product_containerLayout = new javax.swing.GroupLayout(panel_product_container);
        panel_product_container.setLayout(panel_product_containerLayout);
        panel_product_containerLayout.setHorizontalGroup(
            panel_product_containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_product_containerLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(panel_product_containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panel_product_picture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_ejecutar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel_product_containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panel_product_description, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panel_product_generalDesc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panel_product_category, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_product_containerLayout.setVerticalGroup(
            panel_product_containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_product_containerLayout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addGroup(panel_product_containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_product_containerLayout.createSequentialGroup()
                        .addComponent(panel_product_generalDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panel_product_category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panel_product_description, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_product_containerLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(panel_product_picture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_ejecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_product_container, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_product_container, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtF_product_nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtF_product_nameKeyPressed
       if(evt.getKeyCode()==KeyEvent.VK_ENTER){           
            this.results = this.checkInserted();        
            
            if(this.situacion == 1){
                if(!this.isInventary){
                    if(!results[0] && !results[1] && !results[2]){//porque no debría de existir a medias. ya se que sería bueno que ayudara en eso pero...
                        this.prepareToInsert();
                        this.btn_ejecutar.setEnabled(true);
                    }else if(results[0] && results[1] && results[2]){
                        JOptionPane.showMessageDialog(null, "It looks like the product already\n"
                       + "exist, go to Update option. ", "Existent", JOptionPane.ERROR_MESSAGE);
                    }//otro caso no podría ser posible, o no debería...
                }else{
                    if(results[0] && results[1] && !results[2]){  
                       this.prepareToInsert();
                       this.btn_ejecutar.setEnabled(true);
                    }else if(results[0] && results[1] && results[2]){
                        JOptionPane.showMessageDialog(null, "It looks like the product already\n"
                       + "exist, go to Update option. ", "Existent", JOptionPane.ERROR_MESSAGE);
                    }//otro caso no podría ser posible, o no debería...
                }
            }else{
                if(results[0] && results[1] && results[2]){
                    stock = this.prepareToUpdate();  
                    this.btn_ejecutar.setEnabled(true);                
                }else{
                    JOptionPane.showMessageDialog(null, "It looks like you will need\n"
                       + "to create the product", "Unexistent", JOptionPane.ERROR_MESSAGE);
                }
            }
            
        }
    }//GEN-LAST:event_txtF_product_nameKeyPressed

    private void btn_ejecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ejecutarActionPerformed
        if(this.situacion == 1){
            if(!this.isInventary){                    
                this.setupInsert_Stowage();                    
            }else{
                this.setupInsert_inventary();
            }
        }else{  
            if(!this.isInventary){
                this.setupUpdate_stowage();
            }else{
                this.setupUpdate_inventary();
            }               
        }//solo podría ser 2, porque con 3, esta opción nunca se habilita xD        
    }//GEN-LAST:event_btn_ejecutarActionPerformed
    
    private boolean[] checkInserted(){
        boolean result[] = {false, false, false};
        
        if(!isInventary){            
            this.stowage_DAO.getStock_DAO().search_Existence(this.txtF_product_name.getText(),
                    this.office, this.stowage_DAO.getProduct_DAO().search_existence(this.office,
                this.stowage_DAO.getAppliance_DAO()
                        .search_Existence(this.txtF_product_name.getText())));
    
            result[0] = this.stowage_DAO.getAppliance_DAO().getErrorMessage()!=null;//si hubo un error, entonces no EXISTE!!!
            result[1] = this.stowage_DAO.getProduct_DAO().getMessageError()!=null;
            result[2] = this.stowage_DAO.getStock_DAO().isTherAnError();
        }else{
            this.inventary_DAO.getStock_DAO().search_Existence(this.txtF_product_name.getText(),
                this.office, this.inventary_DAO.getProduct_DAO().search_existence(this.office,
                    this.inventary_DAO.getAppliance_DAO()
                        .search_Existence(this.txtF_product_name.getText())));
            
            result[0] = this.inventary_DAO.getAppliance_DAO().getErrorMessage()!=null;//si hubo un error, entonces no EXISTE!!!
            result[1] = this.inventary_DAO.getProduct_DAO().getMessageError()!=null;
            result[2] = this.inventary_DAO.getStock_DAO().isTherAnError();
            
        }       
        return result;
    }    
    
    private void prepareToInsert(){
        if(this.isInventary){            
            Product_DTO productDTO = this.inventary_DAO.getProduct_DAO()
                    .search_existence(this.txtF_product_name.getText(),
                        this.inventary_DAO.getAppliance_DAO().search_Existence(this.txtF_product_name.getText()));
            if(productDTO != null){
                this.txtF_product_code.setText(String.valueOf(productDTO.getID()));                
                this.txtF_product_name.setText(productDTO.getAppliance().getName());
                this.cbBox_product_brand.addItem(productDTO.getAppliance().getBrand());
                this.cbBox_product_type.addItem(productDTO.getAppliance().getClasification().getType());
                this.cbBox_product_line.addItem(productDTO.getAppliance().getClasification().getLine());
                this.spinner_product_price.setValue(String.valueOf(productDTO.getPrice()));                
                this.txtA_product_description.append(productDTO.getAppliance().getDetail());
            }            
        }

        this.txtF_product_stockID.setText(this.stowage_DAO.getStock_DAO().searchActualID(office));                    
        //aqui lo de brand, tyoe y todo eso, si queires que se haga como en lo de producto, pcomo solo es de copiar y pegar...
            //pero seria todas las brand y a lo de types seria donde se app
                //las type segun la brand... y las line segun type, seria mejor al reves xd
    }//Ready
    
    private void setupInsert_Stowage(){
        this.stowage_DAO.getAppliance_DAO().insert(this.txtF_product_name.getText(),
            (String) this.cbBox_product_brand.getSelectedItem(),
            this.txtA_product_description.getText(),
            (String) this.cbBox_product_type.getSelectedItem());
           
        this.stowage_DAO.getProduct_DAO().insert(this.txtF_product_name.getText(),
            (String) this.cbBox_product_brand.getSelectedItem(),
            (Double) this.spinner_product_price.getValue());
           
        this.stowage_DAO.getStock_DAO().insert(this.txtF_product_stockID.getText(),
            this.stowage_DAO.getProduct_DAO()
            .searchCode(this.txtF_product_name.getText(),
                   (String) this.cbBox_product_brand.getSelectedItem()),
                   (Integer) this.spinner_product_quantity.getValue(), office);          
        
        this.stowage_DAO.getStock_DAO().updateID(this.office);
    }
    
    private void setupInsert_inventary(){
        this.inventary_DAO.getStock_DAO().insert(this.txtF_product_stockID.getText(),
            this.inventary_DAO.getProduct_DAO()
                .searchCode(this.txtF_product_name.getText(),
                        (String) this.cbBox_product_brand.getSelectedItem()),
                        (Integer) this.spinner_product_quantity.getValue(), office);
    
        this.inventary_DAO.getStock_DAO().updateID(this.office);
    }//listo  
    
    private Stock_DTO prepareToUpdate(){        
        if(!this.isInventary){
            stock = this.stowage_DAO.getStock_DAO()
               .search(Long.valueOf(this.txtF_product_code.getText()),
                   office);
        }else{
            stock = this.stowage_DAO.getStock_DAO()
                .search(Long.valueOf(this.txtF_product_code.getText()),
                    office);
        }
            
        if(stock != null){
           this.txtF_product_code.setText(String.valueOf(stock.getProduct().getID()));
           this.txtF_product_stockID.setText(stock.getID());
           this.txtF_product_name.setText(stock.getProduct().getAppliance().getName());
           this.cbBox_product_brand.addItem(stock.getProduct().getAppliance().getBrand());
           this.cbBox_product_type.addItem(stock.getProduct().getAppliance().getClasification().getType());
           this.cbBox_product_line.addItem(stock.getProduct().getAppliance().getClasification().getLine());
           this.spinner_product_price.setValue(String.valueOf(stock.getProduct().getPrice()));
           this.spinner_product_quantity.setValue(String.valueOf(stock.getQuantity()));
           this.txtA_product_description.append(stock.getProduct().getAppliance().getDetail());
        }        
        return null;
    }//Ready
    
    private void setupUpdate_stowage(){//basarse en el insert que está listo        
        boolean success = false;                                   
        
        String[] data = 
            {(this.txtF_product_name.getText().equals(stock.getProduct().getAppliance().getName()))
                ?null:this.txtF_product_name.getText(),
              (this.txtA_product_description.getText().equals(stock.getProduct().getAppliance().getDetail()))
                ?null:this.txtA_product_description.getText()};
                
        if(data[0]!=null || data[1]!=null){
            success = this.stowage_DAO.getAppliance_DAO()
                .update(stock.getProduct().getAppliance().getName(), data[0], data[1]);
        }
                
        double price = ((stock.getProduct().getPrice() != ((Double)this.spinner_product_price.getValue()))
            ?((Double) this.spinner_product_price.getValue()):0);
        
        if(price!=0){
            success = this.stowage_DAO.getProduct_DAO()
                .update(stock.getProduct().getID(), price);
        }
                
        int quantity = ((stock.getQuantity() != (Integer)this.spinner_product_quantity.getValue())
            ?(Integer)this.spinner_product_quantity.getValue():0);
                
        if(quantity!=0){
            success = this.stowage_DAO.getStock_DAO().update(true, stock.getID(), true, quantity);
        }        
        
        this.showUpdateMessages(success);
    }//Ready
    
    private void setupUpdate_inventary(){
        boolean success = false;        
    
        int quantity = ((stock.getQuantity() != (Integer)this.spinner_product_quantity.getValue())
                ?(Integer)this.spinner_product_quantity.getValue():0);
                
        if(quantity!=0){
            success = this.inventary_DAO.getStock_DAO().update(true, stock.getID(), true, quantity);
        }                
        
        this.showUpdateMessages(success);
        //segun el enunciado, el de inventario no puede modificar productos
        //auqneu en realidad para mis es faci, porque es el mismo método pero
        //solo tendría que hacer (por la manera en que lo hice) que no pueda modif el nombre.
             
        //De todos modos lo add por lo de las cdads que puede ingresar a sus propias tiendas     
    }
    
     private void showUpdateMessages(boolean success){
        if(!success){                 
            if(!this.isInventary){
             JOptionPane.showMessageDialog(null, ((this.stowage_DAO.getAppliance_DAO().isTherAnError())
                                             ?this.stowage_DAO.getAppliance_DAO().getErrorMessage()
                                             :"")
                                         + ((this.stowage_DAO.getProduct_DAO().isTherAnError())
                                             ?this.stowage_DAO.getProduct_DAO().getMessageError()
                                             :"")
                                         + "Please register the neccessary to proceed",
                                            "Error", JOptionPane.ERROR_MESSAGE);             
            }else{
             JOptionPane.showMessageDialog(null, "The product is not registered yet.\n"
                                              + "Please report this to a Manaager stowage\n"
                                              + "and wait until that is corrected.",
                                               "Error", JOptionPane.ERROR_MESSAGE);
            }
            
            this.stowage_DAO.getAppliance_DAO().ressetErrorMessage();
            this.stowage_DAO.getProduct_DAO().ressetErrorMessage();
            this.stowage_DAO.getStock_DAO().ressetError();
        }else{
            JOptionPane.showMessageDialog(null,
                  ((success)?"Updated Successfully"
                               :"Update with errors\nDo it one more time"),
                     "Results", ((success)?JOptionPane.INFORMATION_MESSAGE:JOptionPane.ERROR_MESSAGE));
        }
    }
    
    private void setUpViews(){
        Stock_DTO stockDTO = inventary_DAO.getStock_DAO().search(this.code, this.office);                
        
        this.txtF_product_code.setText(String.valueOf(stockDTO.getProduct().getID()));
        this.txtF_product_stockID.setText(stockDTO.getID());
        this.txtF_product_name.setText(stockDTO.getProduct().getAppliance().getName());        
        this.cbBox_product_brand.addItem(stockDTO.getProduct().getAppliance().getBrand());        
        this.cbBox_product_type.addItem(stockDTO.getProduct().getAppliance().getClasification().getType());        
        this.cbBox_product_line.addItem(stockDTO.getProduct().getAppliance().getClasification().getLine());        
        this.spinner_product_price.setValue(stockDTO.getProduct().getPrice());        
        this.spinner_product_quantity.setValue(stockDTO.getQuantity());        
        this.txtA_product_description.setText(stockDTO.getProduct().getAppliance().getDetail());        
    }//Ready    
    
    private void setEditableFields(boolean code, boolean name, boolean brand, 
          boolean type, boolean line, boolean price, boolean quantity, boolean desc){
        this.txtF_product_code.setEditable(code);
        this.txtF_product_name.setEditable(name);
        this.cbBox_product_brand.setEditable(brand);
        this.cbBox_product_type.setEditable(type);
        this.cbBox_product_line.setEditable(line);
        this.spinner_product_price.setEnabled(price);
        this.spinner_product_quantity.setEnabled(quantity);
        this.txtA_product_description.setEditable(desc);  
    }//Ready
    
    
    
    
    //Métodos a usar de Product_DAO
        //insert
        //update - aún no ses como directamente
            //si lo vas a hacer fácil, entonces se empleará en inventory_content
        //
    
    
    //Iba a decir que el botono SAVE funcionaría igual que el de BODEGA
    //pero en este caso no, porque en las instrucciones el UPDATE no está
    //permitido para el de INVENTARIOS
        //Entonces cuando reciba el indicador de que funcionará para 
            //INVENTARIO, entonces no se cb a UPDATE luego de presionar 1 vez
            //BODEGA, el caso contrario
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_ejecutar;
    private javax.swing.JComboBox<String> cbBox_product_brand;
    private javax.swing.JComboBox<String> cbBox_product_line;
    private javax.swing.JComboBox<String> cbBox_product_type;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_change_photo;
    private javax.swing.JLabel lbl_product_brand;
    private javax.swing.JLabel lbl_product_code;
    private javax.swing.JLabel lbl_product_line;
    private javax.swing.JLabel lbl_product_name;
    private javax.swing.JLabel lbl_product_photo;
    private javax.swing.JLabel lbl_product_price;
    private javax.swing.JLabel lbl_product_quantity;
    private javax.swing.JLabel lbl_product_stockID;
    private javax.swing.JLabel lbl_product_type;
    private javax.swing.JPanel panel_product_category;
    private javax.swing.JPanel panel_product_container;
    private javax.swing.JPanel panel_product_description;
    private javax.swing.JPanel panel_product_generalDesc;
    private javax.swing.JPanel panel_product_picture;
    private javax.swing.JSpinner spinner_product_price;
    private javax.swing.JSpinner spinner_product_quantity;
    private javax.swing.JTextArea txtA_product_description;
    private javax.swing.JTextField txtF_product_code;
    private javax.swing.JTextField txtF_product_name;
    private javax.swing.JTextField txtF_product_stockID;
    // End of variables declaration//GEN-END:variables
}
