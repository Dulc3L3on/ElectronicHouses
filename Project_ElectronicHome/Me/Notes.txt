COn respecto a los productos
//cuando se estén ingresando
//media vez se haya ingresado el nombre Y la marca
//además de la "oficina/sucursal"
    //se procederá a buscar el stock, pues esos datos son los nec
    //para hallar el stock respectivo
    //puesto que la tabla "PRODUCTO" almacena el stock al que pertenece
    //y este tiene la "sucursal" en la que se encuentra.

    //o sea la búsqueda sería así
        //SEARCH en producto, aquel que tenga el name y brand ingresados
        //THEN, IF you have an office SO you are going to search the stock
        //THEN, ELSE you don't have stock, you are going to show nothing
        //on the stock area.
            //IF you have already a name, brand and office, and there is no
            //stock, SO you are going to "create" it
                //and I used quotations because it is going to be created 
                //without postgres, then if there is no changes SO, you are
                //going to create this stock.

        
    //en el caso de los stock de bodega, estos van a tener diferente inicial
    //en el code, como SBA y los de tienda SOA (store bodega/office available)

    //ya con ese código, no será necesario crear otra entidad, pues con ese distintivo
    //basta. Porque si creo bodega como entidad, solo tendría nombre y almacenaría
    //los stock con los distintivos
        //lo cual sería como si creara un stock solo para apartar esos stock
        //lo cual no está mal, para orden pero xD, si quieres no hacer no lo hagas
        //da tremendamente igual.


//Purchase
    //es la tabla que almacena una fila por cada conjunto de producto igual
//CUando se vaya a hacer insert, transfer o venta, el stock ser revisará
//después de tener la "sucursal" así como lo escribiste y rep en tu cuaderno

//CONTRACT
    //ese es para relacionar al employee with the office

//APPLIANCE
    //lo cree para que cuando se tenga un producto nunevo, sin precio, entonces
    //se coloque ahí

//PRODUCT
    //cuando un appliance ya tiene precio
    //a partir de este será con el que se harán los JOIN, puesto que tiene stock
    //y appliance

//Office
    //más que todo se usará par insertar y para consultar y add info

//OPERACIONES
    //Con respecto a los dctos, después de preguntar voy a app en la tabla, o
    //con el programa sin guardarlo, dep de la respuesta.

//SALE
    //se creará en un principio antes de los PURCHASE, puesto que con eso se
    //sabrá a quién pertenece un PURCHASE
        //Es decir que PURCHASE tendrá la FK con el ID de sell

//Store
    //la agregué por el rol que va a tener el encargado de bodega
    //pero seguirá siendo lo mismo que dije antes
        //es decir va a ser básicamente lo mismo que stock, solo
        //que con diferente formato de identificación y sin office.

        //Ahh no no. No debe existir, bueno si podría, pero por la manera
        //En que creaste producto, si add store, so you will have to add
        //another atribute that will be related with Store, but if the 
        //product is not in the store you will have to give a blank space
        //and I don't want this.
            //Also it remind me that if the case of pull or transfer a prod
            //from store to an office, because of the ID that it will be a PK
            //I won't be able to change it
                //so I'll have to delete the stock IF all of the products on
                //this are removed or transfer. If not, so nothing happens.


//STOCK
    //tendrá una línea por diferente tipo de producto, o de un mismo prod,
    //si es que este pertenece a otra tienda...

//con FK
    //prodcut (2)
    //purchase (2)
    //contract (2)
    //sale (2)
    //stock (1)


//IMAGES
    //si está muy difícil guardar las img en la DB 
    //entonces solo coloca una imagen general en los
    //cuadritos que colocaste

//bien podría haber guardado ADRESS para employee
//pero eso implicaría crear una tabla PERSONA y como
//ya lo hice así por separado, y sé que si lo hago,
//tendré que hacer más relaciones y por tanto JOINS
//entonces pues no lo haré :p

//arreglar y agregar tablas, interfaz LISTA!


//NOTA ABOUT POSTGRESQL

//la FK de preferencia debe corresponder a la PK de la
//entidad primordial en las interacciones, es decir
//aquella que por las acciones a relaizar, es la que se
//debe visitar de primero, por lógica y si se quiere 
//hacer el proceso eficiente
    //Eso lo descubrí por lo de Employee/contract
    //pues estba pensando que, bien podía colocar
    //el ID de contract en Employee, pero si hago eso
    //Se complicaría la cosa, porque para hallar a un
    //empleado teniendo el ID, tendría que buscarlo
    //en contrato, luego hacer con eso el JOIN
    //y pues resulta más rápido que el dato a buscar
    //Sea una PK, porque resulta más fácil para la DB
    //y eso es lo que sucede cuando tengo como PK, el
    //ID de employee...


//ENUMS
 - justificación: como si se puede seleccionar los valores de los ENUM con un SELECT y como no quier oingresar nada más a
   estos que el listado existente y quiero hacer casi todo con la DB y se puede add más cosas a los enum, entonces voy a
   usar estos para Brand, type and category. No para store pues ella tiene más cosas que addle*/

- pensaba en crear en todo caso un enum en Java y con eso setear los vals en la columna de la tabla
  appliance en este caso, PERO si se add otro, tendría que modif el código de Java y creo que para 
  ello se emplea la DB, es decir para datos cambiantes. entonces por buenas prácticas xD.
    - además así pruebo otra manera...

- structure
    CREATE TYPE brand AS ENUM ('');

//además si hubiera creado una tabla solo por ese dato tendría que haber empleado un join, y no iba
  a ser una sola columna con ese caso...
    - así que me ahorro JOINS xD
        -mira si puedes guardar más de una palabra en un enum, así como en java, como para reemplazar
         la TABLE store a un ENUM store
    - para insertar debes usar la palabra como si fuera un VARCHAR y el tipo deberá ser TEXT...
    - ENUM son case sensitive

//PRODUCT
    - con respecto a la tabla CTEGORY, la cree, porque como type and line van de la mano, entonces
      si los creaba por separado como ENUM, podrían cometerse algunos errores, como el colocar un
      tipo con la línea incorrecta, entonces lo que se hará es que cuando
        - se INSERT un producto, al select el typo, a partir de él se irá a buscar a la tabla de
          category, que línea le corresponde para así colocarla en el cbBox que no puede ser SELECT
          y al presionar SAVE, lo que se hará es ir a buscar el ID de la relación entre esos dos ele
          en categoría para insertarlo en APPLIANCE
        - para buscarlo, cuando se seleccione
            LINE- se seteará solo los TYPE que corresponden a ella(s), y todas si select ALL 
            TYPE- se colocará automáticamente la LINE corresp en el cbBox y si
                    > se cb de LINE, entonces se hará el punto1
                    > se cb de TYPE, se volverá a exe 2, porque ahora la línea es otra...

//ACUERDO
    //BUSCAR productos
        //si se selecciona ya sea ALL(type) o los 3 en LINE
            //entonces no habrá WHERE para las LINE y TYPE                
              (más que todo line), porque se quiere ver todo
              //Y en el caso de TYPE si es que se marca 3 de
                LINE, se pasaría a ALL 
             //y si es que se select ALL, puedes marcar o
               desmarcar todo... da lo mismo xD
                    //mejor marcar todo xd
        //si se selecciona +1 pero <3 en LINE, entonces
            //NO habrá WHERE para TYPE, porque es más de
              1 LINE y no los mismos tipos están en ella...
            //y solo se colocaría ALL en el cbBox TYPE
            //creo que en ecoline
                //mira si vas a considerar ese caso 
                  o vas a tratar parejo
                      //porque si sí, entonces ya bien
                        harías que no se pusiera en ALL
                        el TYPE cuando eco y UNO más
                        estuviera SELECT y buscarías en 
                        la DB
                      //o harías una bśuqueda previa 
                        para ver si hay de ese tipo en
                        AMBAS
                          //en DEFINITIVA harías el JOIN
                          para así dejar solo lo que hay
                          entre ambas
                              //esto justo después de que
                                suceda el hecho de que
                                eco y OTRO más esté select
                                  //es decir que después de
                                    eso se cb a la op de
                                    TYPE all, y se tendría
                                    lo recolectado por INNER

//NOTAS GENERALES
    - el ID se incrementará a partir del más grande hallado
      en cada una de las tablas que tiene un ID incrementable
      bajo tu criterio

//ACLARACIÓN
  - En un princiio tenía en mente crear un objeto y que ese tuviera
    como atributo el DAO, pero NO debe ser así, puesto que en primer
    lugar, lo primero que debo usar para obtener la data es el DAO,
    entonces en todo caso debería ser al revés, porque de hacerlo como
    lo tenía en mente, tendría que hacer el DAO static y así como que
    no, además si almaceno la data en la entidad para así hallar la info
    de manera más rápida
      1. puede que se actualice la data y yo siga empleando la antigua
      2. en dado caso hiciera un método para que esa data se UPDATE cuando
         haya un UPDATE o axn modificadora, puede que haya retraso... iba 
         a decir que para eso mejor jalaba los datos, aunque en mi pensar 
         eso no estaría nada mal
            2. pero lo que siempre nos han dicho es que cada vez obtengamos
               la data de la DB para mayor facilidad xD


//ME RECUERDO
  - y tengo muy en mente, esa vez en que dije que no debía hacer nada porque
    la clase en sí se ocupada de ordenar la data, puesto que se le había dado
    la plantilla correspondiente
    - no se si era para un proyecto que no hice, o que hice pero que no app esto...

//SI pues
  - ya en la clase Entity de Backend normal, lo que irán ahí son clases normales
    es decir las que no se usan en la DB o en todo caso si se usan, entonces con
    más funcionalidades como de costumbre xD
      - más que todo sería como para complementar el hecho o las axn o ayudar a
        las axn a hacer pues solo la DB no puede xD

//ABOUT SALES
  - NO habrá DELETE, puesto que entre las políticas de la empresa
    //no se permitirá devolución de dinero, en todo caso lo que se
    //permitiría es un UPDATE, pero deberá conceder permiso el de
    //inventario
        //el UPDATE consistiría en eliminar un producto, siempre y
       //cuando no se quede sin nada, para añadir otro(S), y que
       //el producto que escoja no se pase del precio valorado
            //y si es el caso, entonces deberá pagar el remanente
            //al igual que si paga más productos
                //Eso si, con eso tendría que crear un método de JAVA
                //que se encargue de hacer esto, porque lo que debería
                //pedir es el restante
                    //y si no hay de igual precio?
                        //no es lo mejor, pero por facilidad y creo que
                        //así es. La tienda se quedaría con el resto...
                    //o sea tb que la caja deberá de percatarse que
                    //el nuevo listado de productos sea <= al valor orig
                    //o que si se pasa, cobrar el extra

//ABOUT SALES
   - Recuerda que con respecto a los UPDATE, se mostrará un JOptionPane
     para pedir el código del de inventario, pero solo será para que
     alguien más sea consciente del CHANGE...
      //porque en realidad esto cuenta como otra venta (ya sea que tenga
        algo que pagar o no) lo cual está a cargo de salesPerson.    

//ABOUT SOLD
  - media vez se presione el signo +, esta axn será realizada en la DB, 
    puesto que ya se habrá creado la SALE con los datos primordiales/req
    para proceder a hacer la SOLD, entonces no habrá problema.
      **Es decir que la axn de DELETE sold, will be a reall delete, 'cause
        it will be already done. 

     ** related with this, SALE, will receive the reamining data, after 
        press the button PROCEED. 

    //just check that everything about DELETE is ok.

//DELETE las SOLD -> SALE 
  //first you will delete the sold and
  //if there is no any SOLD to the specific
  //SALE, so you will delete this. But until
  //Reach this point.
      BUT: it just can happen if there is 
           no a CHANGE

           //hay otra axn que solo puede suceder si 
             una condi se cumple
                //quiza era lo de SOLD y SALE cuando
                  se quiere UPDATE, relacionado con 
                  el disccount

//EMPLOYEE/CONTRACT
  //cunado se actualice, la parte del contrato, más que todo la posi y la fecha de end/ini 
    //lo que se tendría que hacer es add OTRO contrato al mismo employee

      **eso quiere decir que tengo que cb posición a contrato
      **y hacer que en la interfaz, la fecha de INI se coloque y cuando pase esto, se add/update
        en la interfaz, solo cuando contrato vaya a recibir info nueva (sea que tuviera antes o no)

//ENVIO
  //STORE: add la ventnita para ENVIAR  
  //y a inventary: para revisar y así ADD
    //al dar DOUBLE click en una fila, se abrirá para
      ver detaller y add cuanto se recibió (así como en
      TRANSFER pero en lugar de poner cuanto se transf,
      será para insertar)
        //por esta razón, el doble click ya solo servirá
          para ver details
        //con el de STORE seguirá permitiendose esto, porque
          debe add cuando le llegue más del mismo
              //Eso si FIJATE que la cdad sea mayor a la que
                estaba originalmente
                  //deplano que con otro spinner Y revisando
                  //O solo revisando

        
//NOTA
  ** media vez hago el código para el de INVENTARY solo tendría que hacer adaptaciones para
     el de stowage...

//INTERFACE
  //INVENTORY
      //SEARCH 
        //cuando solo se coloque código
          //Se buscará en el STOCK los productos que tengan ese código
          //para así mostrar todos los que hay en cada tienda
        //cuando se coloque tienda
          //en cascada se buscará
            //Todas las marcas que la tienda maneja
            //todos los tipos que existan según el listado
              de marcas
        //cuando se seleccione solo marca
          //Se buscará todos los tipos que estén relacionados
            con esa marca.
        
//DAO + ENTITY + DTO 
  //DAO in charge of CRUD - DB
  //ENTITY in charge to do every axn that a specific entity has - programming language (as Java)
  //DTO who receives all the info reolected by a DAO - (receptor/storage)

//DELETE PRODUCT
  //habí adicho que no, pero si no lo hacemos entonces
    //seguirá viviendo en la DB, y en todo caso si sigue
    //así podría hacerlo O hacer que tenga un campo, que
    //diga si está descontinuado o no O simplemente eli
    //y hacer que los empleado se recuerden de ello
        //mejor que se quede (NO DELETE). No es nec add ese
        //field, but if you want...
 

 //I ALREADY HAVE QUERIES of 
  //Inventary 
  //Stowage
  //transfer
  //Product

  //Para la interfaz de PRODUCTO  
    //cuando presionan ADD
        //Se va a buscar
          //el CODE del producto
              //IF search_existence()
                  //search_product();
              //ELSE create_code()
          //el stockID()
              //IF search_existence() //este devuelve la lista d ecosas entonces ya está xD
              //ELSE create_stockID()

          //ADD reamining info
          //O si todos TRUE, UPDATE!   
          
//LOGIN
  //Al final lo dejé como una sola consulta, porque el hecho de que los programas
  //Reales digan que "ya sea" un dato u otro es incorrecto, es porque el verdadero
  //user se supone debería saber...

//EMPLOYEE UPDATE (name/pwd)
  //Para saber si un campo se updateo o no 
    //Vamos a comparar el valor que tenía antes con el 
    //Reciente, que se obtuvo luego de presionar el BTN 
    //si son iguales entonces NULL

//EMPLOYEE UPDATE (hiring state)
  //cuando se intente add un nuevo EMPLOYEE
  //si ya había trabajdo antes
      //se recuperará la data del EMPLOYEE
      //se creará un new CONTRACT
      //se usará UPDATE_HIRING para actualizar el estado

  //Entonces al intentar ADD un employee, a partir del CUI
  //luego de ingresarlo todo, se va a SEARCH si existe un EMPLOYEE
  //con ese CUI
    //IF
       //hacer lo de arriba
    //ELSE
      //hacer lo normal
          //Recibir toda la data
          //Crear employee________] INSERT
          //crear contract        ]

//SALES
  //DELETE
    //there will no more changes that delete a sale
        //but I think you only will ask for the code
        //to have a testified, because that is not a
        //job for an inventory manager (based on proj rules)
        
INDEXOR
  //Después de todos los métodos que reciban un ID y no sea
  //generado de manera automática por la DB, exe el UPDATE
  //de indexor to make sure that every ID is fine.

SALES
  //IF customer DOESN'T exist
    //CREATE customer
  //ELSE 
    //CREATE sale
      //después de tener el customer
          //sin importar que todavía no exista la factura
            //por esto es que había considerado que 
            //Delete podría existir (solicitando el ID del
              de inventario, para que el TENDER pudiera eli
              por si acaso el CUSTOMER se arrepentía, puesto
              que ya estaba creada la row de SALE)
    //create solds
      //Conforme se va presionando (+) para add a la TABLE
    //end SALE
      //al generar la facturita

//RECUERDA!!!
  //el STOCK no se va a borrar!!
      //sin improtar que se quede con quantity == 0
        se quedará ahí, así lo habías acordado hace
        tiempecito, y como sí sale más facil entonces xD

//RECUERDA!!!
  //En el caso de SOLD, el delete como es un DES-venta
    que es = a ADD productos, entonces, será exe by the
    INVENTARY MANAGER...

//GENERAL!!!
  //Es útil que los métodos de las queries devuelvan
    un boolean, para así saber si se va a hacer algo
    con la interfaz o se dejará intacta...

//SALE 
  //En el caso de subtotal y disccount
    //al momneto de buscar una venta por devolución
      //subtotal se opbtendrá a partir de SUM(sold.subt)
      //el disccount si se calculará proque no sé como 
      //multiplicar
  //pero al momento de CREATE
    //Esos 2 se irán cb a partir de funciones de la 
      interfaz que estarán definidas en el backend...

//el total anterior de la Sale, se deberá guardar en una
  var para que nose pierda el dato ants de UPDATE la Sale

TRANSFORMER 
  //Con respecto a los métodos de getProduct, Stock y sus 
    plurales, estaba viendo que esos solo van a funcionar
    para esa interacción en específico, puesto que el dato
    de la columna del RESULT tiene un correlativo, por lo
    cual estaba pensando que podría hacerlos general, de la
    manera en que, reciban el String, long o tipo de caracter
    directamente y no el result, para así obtenerlo de ahí
    pero eso haría que tuviera MÁS métodos (en específico, 
    creo que 1 más)
      //Por lo cual aunque se repita un poco (lo cual sucedería
        tb en el otro caso, pero más disimulado) voy a hacer
        que esos solo se empleen para el SEARCHING del 
        SalesPerson y otros que solo servirán para la bśuqueda
        en inventario, lo cual Hopefully espero que funcione 
        tanto para SalesPerson, Inventary y Stowage...


NOTAS
  //COn respecto al métood de listar todos los tipos con respecto
    a un listado de BRANDs, no tiene sentido, porque en todo caso
    lo que se debería hacer es
      + cuando se tenga ALL en las BRAND, que la op por defecto
        sea ALL Y 
          //si llegan a cb a otro type, entonces
              + que se busque todas las marcas que tienen ese type              
          //o viceversa
              + si cb de marca (ALL a otra o de otra a otra xD)
                  + que se busquen los tipos que corresp a esta BRAND

          //+ si va a aplicar le listado de tipos 
            //por la interfaz
                //Decide si lo harás facil o no xD

JUEGO de CBBOX
1. All - all por defecto
2. otro type - BRANDS que tienen ese TYPE
    //pero por defecto, media vez 
3. otra BRAND - los type que hay en esa BRAND      

-----------------

//IDEA para obtener types de una lista de BRANDs
    /*
        SELECT c.type FROM goodsControl.Clasification as c
        INNER JOIN ---- as --- ON ---.clasi = c.ID
        WHERE office = ?
    */

------------------

//En este caso si es nec, obtener aunque sea la tienda
     //porque no todas tienen los mismos productos disp para
     //la venta...
        //Para productos individuales
            //Code Y store
        //para NO específicos
            //store, brand O
            //store, brand ,type/line(s)

//Si no se tienen los datos necesarios, entonces se mostrará
  un JOP indicando eso
    + solo decide si el msje lo harás específico (Es ddecir por
      caso) o dejarás de una vez el msje de los dos...

----------------

//Sales person - inventary interface 
  //lo del LIKE
    //funcionará sin presionar el btn BUSCAR
    //por lo tanto no le improtan los filtros
    //solo necesita e code...
  //al presionar buscar, los filtros si tendrá efecto

  ------------
  Inventory-tab

  IF store/office = all (claramente tb tendrá todas las office existentes)
    THEN brand, type = all + todos los elementos
  IF store specifica
    THEN brands de esa store; types que tengan esas brand
    IF bran específica 
      THEN types de esa brand

------
 Yo diría que en transformer.getStocks, ya no debería de mandar OFFICE, 
 puesto que el result ya lo tendrá, entonces no es nec...

 ------
 Postion; line; state, datesType, date
  Creo que con respecto a esos, a partir del 2do tendría que colocar OR
    porque sino no va a encontrar ninguna sola línea en la que esos
    campos tengan más de 1 valor...
    * esto se haría así como se hizo con WHERE, es decir que
        * crearía una var booleana para saber si ya es el 2do elemento
          y así colocar OR en lugar de AND
            * y también sin improtar cuantos ele (para reducir un poco
              las condi) encerrar todos los WHERE de un solo tipo (como
              los listados arriba) entre PARÉNTESIS.

--------------
Ahi te recuerdas que después de un DONE on TRANSFER
se tiene que add los producos a la STORE
  - como ese estado lo cb el de INVENTARY que está en
    la store que debía recibir la transfer...

-----------
Basándonos en ROY
este método es para revisar existencia al add/update para saber que corresp.
//(porque si fue una transfer o envío, quiere decri que ya existía...)
        //en el caso real, este método, solo podría ser app en Procudt_UI if stowage, 
        //puesto que los de stowage, harían algo como una transfe y los demás solo
        //Se encargarían de revisar eso, pero vamos a omitir eso y dejarlo en general,
        //(inventary/stowage) porque quizá los prod llegaron desde el proveedor
        //y no la stowage a pesar de ser neuvos... xD

INTERFAZ
++ al momento de editar, solamente QUANTITY y PRICE estarán habilitados
   para cbs, peusto que lo demás no tendría porqué cb, y en todo caso 
   sucediera, que se notifique a los DBMS para aplicar el cb... y ver si
   se habilitará o no xD


INVENTARY (classes)
+ general
* appliance (JUST existence)
* prodcut/stock [searhc existence] and if something from salesPerson is applicable here so also this xD
+ stock [insert/update por medio de transfer (o sea UPDATE es no directo)]

STOWAGE
+clasification (existence, creation)
+appliance ("", "")
+ product ("", "")//y si hay algo que se use en salesPerson, a menso que sea de sale-sold, tb xD
+ 
////

SUMMARY
    -INVENTORY 
    - check if EXIST 
        - 1st PRODUCT
        - 2nd STOCK
    - INSERT
        ADD
        - CREATE product and stock OR stock depending on the case 
        ADD more
        - UPDATE quntity if there is a stock on the office (and of course the product on the DB)
        DELETE 
        - no aplica porque cuando llega a 0,, se auto deletea la existencia
          de los item a vender, mas no del stock, lo cual facilita el proceso...        

    PERO
        momento, porque y que pasa con APPLIANCE???
            - iba a decir que solo aplicara a los de bodega, pero en ese caso
              tb PRODUCTO debería app solo a ellos

        ACUERDO
            - quedé en que
                - para el caso de los de INVENTARY
                        ellos no pueden crear
                            APPLIANCE ni PRODUCT. Eso es trabajo de los
                            de STOWAGE.

                            Por lo tanto los de inventario, solo pueden add
                            quantity y el stock_ID se generará en ese momento
                                -ya solo tendrían que comparar con la desc y 
                                 listo!
                    - eso si, aunque no creen, se revisará la existencia de los
                      appliance y product (esto se hace, buscand appliance, llenado
                      buscando product y llenado la UI)
                        - en caso no se hallara, le caería a los de STOWAGE, porque
                          no hicieron su trabajo...
                            - porque se supone ellos deberían registrar los productos
                              que llegan de primero
                                - ya con eso me pongo a pensar si con ellos debería
                                  existir STOCK o tuve que haber hecho que se usara
                                  otra cosa
                                    - o en todo caso, debería add lo de transfer con ellos
                                      tb puesto que una transfer impllicaría sacar los ele
                                      de su stock, y con eso ya no habría conflicto xD
                                        - solo mira si el proyecto no lo restringe...

                                    - SI PUES... ya había pensado en esto, es decir ENVÍOS, 
                                      pero el aux no me dejó (está bien porque sino tendría
                                      que crear otra entidad y otra tab xD)
                                        - entonces lo qu eme dijo fue, que no usara envíos 
                                          (imagino que por la defi de los proy), sino que
                                          "sacaría" los productos, al acpetar una TRANSFER de
                                          la boodega hacia la tienda que solicitaba...
                                            - de cualquiera de las 2 formas, el stock perteneciente
                                              a los de bodega, está bien xD (es decir, no causa conflicto xD)
                - para los de STOWAGE
                    - INSERT: pueden crear (mejor dicho , DEBEN) APPLIANE y PRODUCT además de stock
                      si no existe ahí dentro
                    - UPDATE: de cdades de stocks. LO harán cuando acepten TRANSFERIR hacia una tienda
                      y solo ahí.
                    - DELTE: lo mismo que con inventary, no hay un delete directo, sino indirecto, cuando el
                      stock se quede siin quantity. NO dejará de existir pero no porá entrar en axn por la
                      escazes en la que estaŕia pasando...

      Acerca de la CATEGORY, eso no lo puede crear los de STOWAGE(en realdiad debería pero vamos a poner
      una excusa para no add más, porque en ese caso, tendría que mostrar un JOP o un mini dialogo para hacerlo
      ya que en el cbBox solo aparece los por defecto...)
        pero eso no es como que urga xD
          - en ese caso debería add un (+) button on category card, to do this, but JUST when a STOWAWGE is
            who is the host of the app...
-------------

    
  REMEMBER: la UPDATE of qunatity will be
    - directly (inv/stow)
    - sold (--)
    - transfer (++) DONE 

------------
super obvi note
  //si se ref a ingreso monetario, entonces se debe buscar en SOLD
  //y hacer una suma por cada producto para hallar esto, pues no
  //nec el más vendido es el que más ingresos deja.

JASPER----------
Yo me acuerdo que se podía enviar un ArrayList de ArrayList, al momento
de enviar la data a ser setear, PERO no me acuerdo si debía hacer algo 
en específico o no
  - creo que se tenía que usar en ese caso, SUB reportes...

  Pero como no tengo tiempo de revisar en mis proyectos (puesto que no
  me recuerdo en cuál emplee esto, si es que no me acuerdo mal).
    THEN voy a enviar una sola lista en lugar de tener una por cada tienda
    y por eso tenga que setearlas en otra para que se envíe todo xD
